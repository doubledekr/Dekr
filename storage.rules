rules_version = '2';

// Firebase Storage Security Rules for dekr-nextgen
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAuthorizedUser() {
      return isAuthenticated() || request.auth.uid == 'demo-user-123';
    }
    
    // Main content folder with organized structure
    match /dekr-content/{allPaths=**} {
      
      // Audio folder - organized by content type
      match /audio/{allPaths=**} {
        
        // Lessons audio - public read access for all authenticated users and demo user
        match /lessons/{allPaths=**} {
          allow read: if isAuthorizedUser();
          allow write: if false; // Only Cloud Functions can upload lessons
        }
        
        // Community audio - public read access
        match /community/{allPaths=**} {
          allow read: if isAuthorizedUser();
          allow write: if isAuthenticated(); // Authenticated users can upload community content
        }
        
        // Podcasts audio - public read access
        match /podcasts/{allPaths=**} {
          allow read: if isAuthorizedUser();
          allow write: if false; // Only Cloud Functions can upload podcasts
        }
        
        // Intro stingers - public read access
        match /intro_stingers/{allPaths=**} {
          allow read: if isAuthorizedUser();
          allow write: if false; // Only admin/Cloud Functions
        }
      }
      
      // Documents folder
      match /documents/{allPaths=**} {
        
        // Newsletters - user-specific access
        match /newsletters/{userId}/{allPaths=**} {
          allow read, write: if isOwner(userId);
        }
        
        // Transcripts - public read access for lessons
        match /transcripts/{allPaths=**} {
          allow read: if isAuthorizedUser();
          allow write: if false; // Only Cloud Functions
        }
        
        // Scripts - public read access for podcasts
        match /scripts/{allPaths=**} {
          allow read: if isAuthorizedUser();
          allow write: if false; // Only Cloud Functions
        }
      }
      
      // Images folder
      match /images/{allPaths=**} {
        
        // Lesson thumbnails - public read access
        match /lesson_thumbnails/{allPaths=**} {
          allow read: if isAuthorizedUser();
          allow write: if false; // Only Cloud Functions
        }
        
        // User avatars - user-specific access
        match /user_avatars/{userId}.{extension} {
          allow read: if isAuthenticated() && 
            (isOwner(userId) || 
             // Allow friends to see avatars
             exists(/databases/(default)/documents/friends/$(request.auth.uid + '_' + userId)));
          allow write: if isOwner(userId);
        }
        
        // Deck covers - public read access
        match /deck_covers/{allPaths=**} {
          allow read: if isAuthorizedUser();
          allow write: if isAuthenticated(); // Deck owners can upload covers
        }
      }
    }
    
    // Legacy storage paths for backward compatibility
    match /podcasts/{userId}/{allPaths=**} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == userId || 
         request.auth.uid == 'demo-user-123');
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    match /audio/{allPaths=**} {
      allow read: if isAuthorizedUser();
      allow write: if false; // No write access (managed by admin)
    }
    
    match /weekly-podcasts/{allPaths=**} {
      allow read: if isAuthorizedUser();
      allow write: if isAuthenticated();
    }
    
    match /users/{userId}/{allPaths=**} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == userId || 
         exists(/databases/(default)/documents/friends/$(request.auth.uid + '_' + userId)));
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Default rule - deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}